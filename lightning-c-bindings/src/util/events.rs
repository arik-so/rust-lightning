//! " Events are returned from various bits in the library which indicate some action must be taken"
//! " by the client."
//! ""
//! " Because we don't have a built-in runtime, it's up to the client to call events at a time in the"
//! " future, as well as generate and broadcast funding transactions handle payment preimages and a"
//! " few other things."

use std::ffi::c_void;
use bitcoin::hashes::Hash;

use bitcoin::blockdata::script::Script as lnScript;
use bitcoin::secp256k1::key::PublicKey as lnPublicKey;

use lightning::util::events::Event as lnEventImport;
type lnEvent = lnEventImport;

/// " An Event which you should probably take some action in response to."
/// ""
/// " Note that while Writeable and Readable are implemented for Event, you probably shouldn't use"
/// " them directly as they don't round-trip exactly (for example FundingGenerationReady is never"
/// " written as it makes no sense to respond to it after reconnecting to peers)."
#[repr(C)]
pub struct Event {
	pub(crate) inner: *const lnEvent,
}

#[no_mangle]
pub extern "C" fn Event_free(this_ptr: Event) {
	let _ = unsafe { Box::from_raw(this_ptr.inner as *mut lnEvent) };
}

use lightning::util::events::MessageSendEvent as lnMessageSendEventImport;
type lnMessageSendEvent = lnMessageSendEventImport;

/// " An event generated by ChannelManager which indicates a message should be sent to a peer (or"
/// " broadcast to most peers)."
/// " These events are handled by PeerManager::process_events if you are using a PeerManager."
#[repr(C)]
pub struct MessageSendEvent {
	pub(crate) inner: *const lnMessageSendEvent,
}

#[no_mangle]
pub extern "C" fn MessageSendEvent_free(this_ptr: MessageSendEvent) {
	let _ = unsafe { Box::from_raw(this_ptr.inner as *mut lnMessageSendEvent) };
}
/// " A trait indicating an object may generate message send events"
#[repr(C)]
pub struct MessageSendEventsProvider {
	pub this_arg: *mut c_void,
	//XXX: Need to export get_and_clear_pending_msg_events
}

use lightning::util::events::MessageSendEventsProvider as lnMessageSendEventsProvider;
impl lnMessageSendEventsProvider for MessageSendEventsProvider {
	fn get_and_clear_pending_msg_events(&self) -> Vec<lightning::util::events::MessageSendEvent> {
		unimplemented!();
	}
}

// We're essentially a pointer already, or at least a set of pointers, so allow us to be used
// directly as a Deref trait in higher-level structs:
impl std::ops::Deref for MessageSendEventsProvider {
	type Target = Self;
	fn deref(&self) -> &Self {
		self
	}
}
/// " A trait indicating an object may generate events"
#[repr(C)]
pub struct EventsProvider {
	pub this_arg: *mut c_void,
	//XXX: Need to export get_and_clear_pending_events
}

use lightning::util::events::EventsProvider as lnEventsProvider;
impl lnEventsProvider for EventsProvider {
	fn get_and_clear_pending_events(&self) -> Vec<lightning::util::events::Event> {
		unimplemented!();
	}
}

// We're essentially a pointer already, or at least a set of pointers, so allow us to be used
// directly as a Deref trait in higher-level structs:
impl std::ops::Deref for EventsProvider {
	type Target = Self;
	fn deref(&self) -> &Self {
		self
	}
}
